// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  EMPLOYEE
  CEO
}

enum PDRStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  MID_YEAR_CHECK
  END_YEAR_REVIEW
  COMPLETED
  LOCKED
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum AuditAction {
  INSERT
  UPDATE
  DELETE
}

model User {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String   @unique @db.VarChar(255)
  firstName   String   @map("first_name") @db.VarChar(100)
  lastName    String   @map("last_name") @db.VarChar(100)
  role        UserRole @default(EMPLOYEE)
  passwordHash String  @map("password_hash") @db.VarChar(255)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  pdrs        PDR[]
  auditLogs   AuditLog[]

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

model PDRPeriod {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @unique @db.VarChar(100)
  startDate DateTime @map("start_date") @db.Date
  endDate   DateTime @map("end_date") @db.Date
  isActive  Boolean  @default(false) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  pdrs PDR[]

  @@map("pdr_periods")
}

model PDR {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  periodId    String    @map("period_id") @db.Uuid
  status      PDRStatus @default(DRAFT)
  isLocked    Boolean   @default(false) @map("is_locked")
  currentStep Int       @default(1) @map("current_step")
  submittedAt DateTime? @map("submitted_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  period         PDRPeriod       @relation(fields: [periodId], references: [id], onDelete: Cascade)
  goals          Goal[]
  behaviors      Behavior[]
  midYearReview  MidYearReview?
  endYearReview  EndYearReview?

  @@unique([userId, periodId])
  @@index([userId, periodId])
  @@index([status])
  @@map("pdrs")
}

model Goal {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pdrId            String   @map("pdr_id") @db.Uuid
  title            String   @db.VarChar(255)
  description      String?  @db.Text
  targetOutcome    String?  @map("target_outcome") @db.Text
  successCriteria  String?  @map("success_criteria") @db.Text
  priority         Priority @default(MEDIUM)
  employeeProgress String?  @map("employee_progress") @db.Text
  employeeRating   Int?     @map("employee_rating")
  ceoComments      String?  @map("ceo_comments") @db.Text
  ceoRating        Int?     @map("ceo_rating")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  pdr PDR @relation(fields: [pdrId], references: [id], onDelete: Cascade)

  @@index([pdrId])
  @@index([priority])
  @@map("goals")
}

model CompanyValue {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(100)
  description String   @db.Text
  isActive    Boolean  @default(true) @map("is_active")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  behaviors Behavior[]

  @@map("company_values")
}

model Behavior {
  id                     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pdrId                  String   @map("pdr_id") @db.Uuid
  valueId                String   @map("value_id") @db.Uuid
  description            String   @db.Text
  examples               String?  @db.Text
  employeeSelfAssessment String?  @map("employee_self_assessment") @db.Text
  employeeRating         Int?     @map("employee_rating")
  ceoComments            String?  @map("ceo_comments") @db.Text
  ceoRating              Int?     @map("ceo_rating")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  pdr   PDR          @relation(fields: [pdrId], references: [id], onDelete: Cascade)
  value CompanyValue @relation(fields: [valueId], references: [id])

  @@index([pdrId])
  @@index([valueId])
  @@map("behaviors")
}

model MidYearReview {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pdrId               String   @unique @map("pdr_id") @db.Uuid
  progressSummary     String   @map("progress_summary") @db.Text
  blockersChallenges  String?  @map("blockers_challenges") @db.Text
  supportNeeded       String?  @map("support_needed") @db.Text
  employeeComments    String?  @map("employee_comments") @db.Text
  ceoFeedback         String?  @map("ceo_feedback") @db.Text
  submittedAt         DateTime @default(now()) @map("submitted_at")
  createdAt           DateTime @default(now()) @map("created_at")

  // Relations
  pdr PDR @relation(fields: [pdrId], references: [id], onDelete: Cascade)

  @@map("mid_year_reviews")
}

model EndYearReview {
  id                     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pdrId                  String   @unique @map("pdr_id") @db.Uuid
  achievementsSummary    String   @map("achievements_summary") @db.Text
  learningsGrowth        String?  @map("learnings_growth") @db.Text
  challengesFaced        String?  @map("challenges_faced") @db.Text
  nextYearGoals          String?  @map("next_year_goals") @db.Text
  employeeOverallRating  Int?     @map("employee_overall_rating")
  ceoOverallRating       Int?     @map("ceo_overall_rating")
  ceoFinalComments       String?  @map("ceo_final_comments") @db.Text
  submittedAt            DateTime @default(now()) @map("submitted_at")
  createdAt              DateTime @default(now()) @map("created_at")

  // Relations
  pdr PDR @relation(fields: [pdrId], references: [id], onDelete: Cascade)

  @@map("end_year_reviews")
}

model AuditLog {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tableName  String      @map("table_name") @db.VarChar(50)
  recordId   String      @map("record_id") @db.Uuid
  action     AuditAction
  oldValues  Json?       @map("old_values")
  newValues  Json?       @map("new_values")
  changedBy  String?     @map("changed_by") @db.Uuid
  changedAt  DateTime    @default(now()) @map("changed_at")
  ipAddress  String?     @map("ip_address")
  userAgent  String?     @map("user_agent") @db.Text

  // Relations
  user User? @relation(fields: [changedBy], references: [id])

  @@index([tableName, recordId])
  @@index([changedBy])
  @@index([changedAt])
  @@map("audit_logs")
}
